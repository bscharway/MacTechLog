// <auto-generated />
using System;
using AircraftService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AircraftService.Migrations
{
    [DbContext(typeof(AircraftDbContext))]
    [Migration("20241021123504_Aircraft flight tracking")]
    partial class Aircraftflighttracking
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AircraftService.Models.Entities.Aircraft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CurrentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Cycles")
                        .HasColumnType("int");

                    b.Property<int>("FuelCapacity")
                        .HasColumnType("int");

                    b.Property<int>("FuelManagementDataId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Registration")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("TotalFlightHours")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FuelManagementDataId");

                    b.ToTable("Aircrafts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CurrentStatus = "Airworthy",
                            Cycles = 1500,
                            FuelCapacity = 26000,
                            FuelManagementDataId = 1,
                            LastUpdated = new DateTime(2024, 10, 21, 12, 35, 3, 698, DateTimeKind.Utc).AddTicks(3441),
                            Model = "Boeing 737",
                            Registration = "N12345",
                            TotalFlightHours = 5000
                        },
                        new
                        {
                            Id = 2,
                            CurrentStatus = "AOG",
                            Cycles = 1200,
                            FuelCapacity = 24210,
                            FuelManagementDataId = 2,
                            LastUpdated = new DateTime(2024, 10, 21, 12, 35, 3, 698, DateTimeKind.Utc).AddTicks(3447),
                            Model = "Airbus A320",
                            Registration = "G67890",
                            TotalFlightHours = 4000
                        },
                        new
                        {
                            Id = 3,
                            CurrentStatus = "Airworthy",
                            Cycles = 3000,
                            FuelCapacity = 183380,
                            FuelManagementDataId = 3,
                            LastUpdated = new DateTime(2024, 10, 21, 12, 35, 3, 698, DateTimeKind.Utc).AddTicks(3449),
                            Model = "Boeing 747",
                            Registration = "D45678",
                            TotalFlightHours = 10000
                        },
                        new
                        {
                            Id = 4,
                            CurrentStatus = "Under Maintenance",
                            Cycles = 2000,
                            FuelCapacity = 320000,
                            FuelManagementDataId = 4,
                            LastUpdated = new DateTime(2024, 10, 21, 12, 35, 3, 698, DateTimeKind.Utc).AddTicks(3451),
                            Model = "Airbus A380",
                            Registration = "F12367",
                            TotalFlightHours = 7000
                        },
                        new
                        {
                            Id = 5,
                            CurrentStatus = "Airworthy",
                            Cycles = 800,
                            FuelCapacity = 13000,
                            FuelManagementDataId = 5,
                            LastUpdated = new DateTime(2024, 10, 21, 12, 35, 3, 698, DateTimeKind.Utc).AddTicks(3453),
                            Model = "Embraer E190",
                            Registration = "H89012",
                            TotalFlightHours = 2000
                        },
                        new
                        {
                            Id = 6,
                            CurrentStatus = "Airworthy",
                            Cycles = 300,
                            FuelCapacity = 210,
                            FuelManagementDataId = 6,
                            LastUpdated = new DateTime(2024, 10, 21, 12, 35, 3, 698, DateTimeKind.Utc).AddTicks(3455),
                            Model = "Cessna 172",
                            Registration = "I34567",
                            TotalFlightHours = 500
                        });
                });

            modelBuilder.Entity("AircraftService.Models.Entities.FuelManagementData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FuelCapacity")
                        .HasColumnType("int");

                    b.Property<double>("FuelOnBoard")
                        .HasColumnType("float");

                    b.Property<DateTime>("LastRefueled")
                        .HasColumnType("datetime2");

                    b.Property<double>("PlannedUplift")
                        .HasColumnType("float");

                    b.Property<double>("RecentUplift")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("FuelManagementData");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FuelCapacity = 0,
                            FuelOnBoard = 15000.0,
                            LastRefueled = new DateTime(2024, 10, 20, 12, 35, 3, 698, DateTimeKind.Utc).AddTicks(3694),
                            PlannedUplift = 6000.0,
                            RecentUplift = 5000.0
                        },
                        new
                        {
                            Id = 2,
                            FuelCapacity = 0,
                            FuelOnBoard = 12000.0,
                            LastRefueled = new DateTime(2024, 10, 19, 12, 35, 3, 698, DateTimeKind.Utc).AddTicks(3705),
                            PlannedUplift = 5000.0,
                            RecentUplift = 3000.0
                        },
                        new
                        {
                            Id = 3,
                            FuelCapacity = 0,
                            FuelOnBoard = 80000.0,
                            LastRefueled = new DateTime(2024, 10, 18, 12, 35, 3, 698, DateTimeKind.Utc).AddTicks(3708),
                            PlannedUplift = 60000.0,
                            RecentUplift = 50000.0
                        },
                        new
                        {
                            Id = 4,
                            FuelCapacity = 0,
                            FuelOnBoard = 250000.0,
                            LastRefueled = new DateTime(2024, 10, 17, 12, 35, 3, 698, DateTimeKind.Utc).AddTicks(3710),
                            PlannedUplift = 80000.0,
                            RecentUplift = 70000.0
                        },
                        new
                        {
                            Id = 5,
                            FuelCapacity = 0,
                            FuelOnBoard = 8000.0,
                            LastRefueled = new DateTime(2024, 10, 16, 12, 35, 3, 698, DateTimeKind.Utc).AddTicks(3711),
                            PlannedUplift = 4000.0,
                            RecentUplift = 3000.0
                        },
                        new
                        {
                            Id = 6,
                            FuelCapacity = 0,
                            FuelOnBoard = 100.0,
                            LastRefueled = new DateTime(2024, 10, 15, 12, 35, 3, 698, DateTimeKind.Utc).AddTicks(3713),
                            PlannedUplift = 70.0,
                            RecentUplift = 50.0
                        });
                });

            modelBuilder.Entity("AircraftService.Models.Entities.Aircraft", b =>
                {
                    b.HasOne("AircraftService.Models.Entities.FuelManagementData", "FuelManagementData")
                        .WithMany()
                        .HasForeignKey("FuelManagementDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FuelManagementData");
                });
#pragma warning restore 612, 618
        }
    }
}
