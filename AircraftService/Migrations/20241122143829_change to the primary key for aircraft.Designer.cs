// <auto-generated />
using System;
using AircraftService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AircraftService.Migrations
{
    [DbContext(typeof(AircraftDbContext))]
    [Migration("20241122143829_change to the primary key for aircraft")]
    partial class changetotheprimarykeyforaircraft
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AircraftService.Models.Entities.Aircraft", b =>
                {
                    b.Property<string>("Registration")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CurrentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Cycles")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TotalFlightHours")
                        .HasColumnType("int");

                    b.HasKey("Registration");

                    b.ToTable("Aircrafts");

                    b.HasData(
                        new
                        {
                            Registration = "N12345",
                            CurrentStatus = "Airworthy",
                            Cycles = 1500,
                            LastUpdated = new DateTime(2024, 11, 22, 14, 38, 28, 832, DateTimeKind.Utc).AddTicks(5375),
                            Model = "Boeing 737",
                            TotalFlightHours = 5000
                        },
                        new
                        {
                            Registration = "G67890",
                            CurrentStatus = "AOG",
                            Cycles = 1200,
                            LastUpdated = new DateTime(2024, 11, 22, 14, 38, 28, 832, DateTimeKind.Utc).AddTicks(5377),
                            Model = "Airbus A320",
                            TotalFlightHours = 4000
                        },
                        new
                        {
                            Registration = "D45678",
                            CurrentStatus = "Airworthy",
                            Cycles = 3000,
                            LastUpdated = new DateTime(2024, 11, 22, 14, 38, 28, 832, DateTimeKind.Utc).AddTicks(5379),
                            Model = "Boeing 747",
                            TotalFlightHours = 10000
                        },
                        new
                        {
                            Registration = "F12367",
                            CurrentStatus = "Under Maintenance",
                            Cycles = 2000,
                            LastUpdated = new DateTime(2024, 11, 22, 14, 38, 28, 832, DateTimeKind.Utc).AddTicks(5380),
                            Model = "Airbus A380",
                            TotalFlightHours = 7000
                        },
                        new
                        {
                            Registration = "H89012",
                            CurrentStatus = "Airworthy",
                            Cycles = 800,
                            LastUpdated = new DateTime(2024, 11, 22, 14, 38, 28, 832, DateTimeKind.Utc).AddTicks(5382),
                            Model = "Embraer E190",
                            TotalFlightHours = 2000
                        },
                        new
                        {
                            Registration = "I34567",
                            CurrentStatus = "Airworthy",
                            Cycles = 300,
                            LastUpdated = new DateTime(2024, 11, 22, 14, 38, 28, 832, DateTimeKind.Utc).AddTicks(5383),
                            Model = "Cessna 172",
                            TotalFlightHours = 500
                        });
                });

            modelBuilder.Entity("AircraftService.Models.Entities.FuelManagementData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("ActualUplift")
                        .HasColumnType("float");

                    b.Property<string>("AircraftRegistration")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<double?>("LandingFuel")
                        .HasColumnType("float");

                    b.Property<double>("LatestRecordedFuelOnBoard")
                        .HasColumnType("float");

                    b.Property<int?>("MaintenanceLogId")
                        .HasColumnType("int");

                    b.Property<double>("PlannedUplift")
                        .HasColumnType("float");

                    b.Property<double?>("RevisedParkingFuel")
                        .HasColumnType("float");

                    b.Property<int?>("TripLogId")
                        .HasColumnType("int");

                    b.Property<double?>("UpliftInLiters")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AircraftRegistration");

                    b.ToTable("FuelManagementData");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActualUplift = 5000.0,
                            AircraftRegistration = "N12345",
                            LandingFuel = 10000.0,
                            LatestRecordedFuelOnBoard = 15000.0,
                            PlannedUplift = 5000.0,
                            RevisedParkingFuel = 15000.0,
                            UpliftInLiters = 2700.0
                        },
                        new
                        {
                            Id = 2,
                            ActualUplift = 3100.0,
                            AircraftRegistration = "G67890",
                            LandingFuel = 6000.0,
                            LatestRecordedFuelOnBoard = 12000.0,
                            PlannedUplift = 3000.0,
                            RevisedParkingFuel = 12000.0,
                            UpliftInLiters = 1500.0
                        },
                        new
                        {
                            Id = 3,
                            ActualUplift = 30100.0,
                            AircraftRegistration = "D45678",
                            LandingFuel = 30000.0,
                            LatestRecordedFuelOnBoard = 20000.0,
                            PlannedUplift = 30000.0,
                            RevisedParkingFuel = 19500.0,
                            UpliftInLiters = 15000.0
                        },
                        new
                        {
                            Id = 4,
                            ActualUplift = 21000.0,
                            AircraftRegistration = "F12367",
                            LandingFuel = 30000.0,
                            LatestRecordedFuelOnBoard = 25000.0,
                            PlannedUplift = 20000.0,
                            RevisedParkingFuel = 24500.0,
                            UpliftInLiters = 22000.0
                        },
                        new
                        {
                            Id = 5,
                            ActualUplift = 2100.0,
                            AircraftRegistration = "H89012",
                            LandingFuel = 3400.0,
                            LatestRecordedFuelOnBoard = 5000.0,
                            PlannedUplift = 2000.0,
                            RevisedParkingFuel = 5000.0,
                            UpliftInLiters = 3200.0
                        },
                        new
                        {
                            Id = 6,
                            ActualUplift = 22100.0,
                            AircraftRegistration = "I34567",
                            LandingFuel = 32400.0,
                            LatestRecordedFuelOnBoard = 52000.0,
                            PlannedUplift = 22000.0,
                            RevisedParkingFuel = 52000.0,
                            UpliftInLiters = 32200.0
                        });
                });

            modelBuilder.Entity("AircraftService.Models.Entities.FuelManagementData", b =>
                {
                    b.HasOne("AircraftService.Models.Entities.Aircraft", "Aircraft")
                        .WithMany()
                        .HasForeignKey("AircraftRegistration")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aircraft");
                });
#pragma warning restore 612, 618
        }
    }
}
