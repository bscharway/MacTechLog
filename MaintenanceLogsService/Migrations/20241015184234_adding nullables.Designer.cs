// <auto-generated />
using System;
using MaintenanceLogsService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MaintenanceLogsService.Migrations
{
    [DbContext(typeof(MaintenanceLogsContext))]
    [Migration("20241015184234_adding nullables")]
    partial class addingnullables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MaintenanceLogsService.Models.Entities.DefectReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("bit");

                    b.Property<int>("MaintenanceLogId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceLogId");

                    b.ToTable("DefectReports");
                });

            modelBuilder.Entity("MaintenanceLogsService.Models.Entities.MaintenanceLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AircraftRegistration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOperationalProcedure")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRepetitive")
                        .HasColumnType("bit");

                    b.Property<string>("MELReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OilHydraulicFluidDataId")
                        .HasColumnType("int");

                    b.Property<string>("TechnicianId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OilHydraulicFluidDataId");

                    b.ToTable("MaintenanceLogs");
                });

            modelBuilder.Entity("MaintenanceLogsService.Models.Entities.OilHydraulicFluidData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("APUOilAdded")
                        .HasColumnType("float");

                    b.Property<double?>("CenterHydraulicSystemFluidAdded")
                        .HasColumnType("float");

                    b.Property<double?>("LeftHandEngineOilAdded")
                        .HasColumnType("float");

                    b.Property<double?>("LeftHandHydraulicSystemFluidAdded")
                        .HasColumnType("float");

                    b.Property<double?>("RightHandEngineOilAdded")
                        .HasColumnType("float");

                    b.Property<double?>("RightHandHydraulicSystemFluidAdded")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("OilHydraulicFluidData");
                });

            modelBuilder.Entity("MaintenanceLogsService.Models.Entities.PartReplacement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BatchNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaintenanceLogId")
                        .HasColumnType("int");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceLogId");

                    b.ToTable("PartReplacements");
                });

            modelBuilder.Entity("MaintenanceLogsService.Models.Entities.DefectReport", b =>
                {
                    b.HasOne("MaintenanceLogsService.Models.Entities.MaintenanceLog", "MaintenanceLog")
                        .WithMany("DefectReports")
                        .HasForeignKey("MaintenanceLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaintenanceLog");
                });

            modelBuilder.Entity("MaintenanceLogsService.Models.Entities.MaintenanceLog", b =>
                {
                    b.HasOne("MaintenanceLogsService.Models.Entities.OilHydraulicFluidData", "OilHydraulicFluidData")
                        .WithMany()
                        .HasForeignKey("OilHydraulicFluidDataId");

                    b.Navigation("OilHydraulicFluidData");
                });

            modelBuilder.Entity("MaintenanceLogsService.Models.Entities.PartReplacement", b =>
                {
                    b.HasOne("MaintenanceLogsService.Models.Entities.MaintenanceLog", "MaintenanceLog")
                        .WithMany("PartReplacements")
                        .HasForeignKey("MaintenanceLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaintenanceLog");
                });

            modelBuilder.Entity("MaintenanceLogsService.Models.Entities.MaintenanceLog", b =>
                {
                    b.Navigation("DefectReports");

                    b.Navigation("PartReplacements");
                });
#pragma warning restore 612, 618
        }
    }
}
