// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PilotEntryService.Data;

#nullable disable

namespace PilotEntryService.Migrations
{
    [DbContext(typeof(PilotEntryContext))]
    [Migration("20241024045156_blockTimes and putting tables together")]
    partial class blockTimesandputtingtablestogether
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PilotEntryService.Models.Entities.De_Anti_IcingData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FluidType")
                        .HasColumnType("int");

                    b.Property<string>("MixtureRatio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly?>("Time")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("DeAntiIcingData");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FluidType = 1,
                            MixtureRatio = "50/50",
                            Time = new TimeOnly(0, 51, 55, 968).Add(TimeSpan.FromTicks(9549))
                        },
                        new
                        {
                            Id = 2,
                            FluidType = 2,
                            MixtureRatio = "50/50",
                            Time = new TimeOnly(19, 51, 55, 968).Add(TimeSpan.FromTicks(9563))
                        });
                });

            modelBuilder.Entity("PilotEntryService.Models.Entities.FuelData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("ActualUplift")
                        .HasColumnType("float");

                    b.Property<double?>("FuelOnBoard")
                        .HasColumnType("float");

                    b.Property<double>("ParkingFuel")
                        .HasColumnType("float");

                    b.Property<double?>("PlannedUplift")
                        .HasColumnType("float");

                    b.Property<double?>("RevisedParkingFuel")
                        .HasColumnType("float");

                    b.Property<double?>("UpliftInLiters")
                        .HasColumnType("float");

                    b.Property<double>("landingfuel")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("FuelData");
                });

            modelBuilder.Entity("PilotEntryService.Models.Entities.Inspection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("PostFlightInspectionCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("PreFlightInspectionCompleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Inspections");
                });

            modelBuilder.Entity("PilotEntryService.Models.Entities.TripLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActualTimeOfDeparture")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ActualTimeOfLanding")
                        .HasColumnType("datetime2");

                    b.Property<double?>("ActualUplift")
                        .HasColumnType("float");

                    b.Property<string>("AircraftRegistration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cycles")
                        .HasColumnType("int");

                    b.Property<int?>("DeAntiIcingDataId")
                        .HasColumnType("int");

                    b.Property<string>("DepartureAirport")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("DestinationAirport")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("FlightNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<double?>("FuelOnBoard")
                        .HasColumnType("float");

                    b.Property<DateTime>("OffBlockTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OnBlockTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("ParkingFuel")
                        .HasColumnType("float");

                    b.Property<string>("PilotId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("PlannedUplift")
                        .HasColumnType("float");

                    b.Property<bool>("PostFlightInspectionCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("PreFlightInspectionCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("RevisedParkingFuel")
                        .HasColumnType("float");

                    b.Property<double?>("UpliftInLiters")
                        .HasColumnType("float");

                    b.Property<double>("landingfuel")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DeAntiIcingDataId");

                    b.ToTable("TripLogs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActualTimeOfDeparture = new DateTime(2024, 10, 23, 23, 56, 55, 968, DateTimeKind.Utc).AddTicks(9691),
                            ActualTimeOfLanding = new DateTime(2024, 10, 24, 4, 46, 55, 968, DateTimeKind.Utc).AddTicks(9696),
                            ActualUplift = 480.0,
                            AircraftRegistration = "N12345",
                            Cycles = 0,
                            DeAntiIcingDataId = 1,
                            DepartureAirport = "JFK",
                            DestinationAirport = "LAX",
                            FlightNumber = "AB123",
                            FuelOnBoard = 1500.0,
                            OffBlockTime = new DateTime(2024, 10, 23, 23, 51, 55, 968, DateTimeKind.Utc).AddTicks(9689),
                            OnBlockTime = new DateTime(2024, 10, 24, 4, 51, 55, 968, DateTimeKind.Utc).AddTicks(9697),
                            ParkingFuel = 1000.0,
                            PilotId = "P001",
                            PlannedUplift = 500.0,
                            PostFlightInspectionCompleted = true,
                            PreFlightInspectionCompleted = true,
                            Remarks = "Smooth flight",
                            RevisedParkingFuel = 950.0,
                            UpliftInLiters = 600.0,
                            landingfuel = 800.0
                        },
                        new
                        {
                            Id = 2,
                            ActualTimeOfDeparture = new DateTime(2024, 10, 23, 18, 56, 55, 968, DateTimeKind.Utc).AddTicks(9707),
                            ActualTimeOfLanding = new DateTime(2024, 10, 23, 23, 46, 55, 968, DateTimeKind.Utc).AddTicks(9708),
                            ActualUplift = 480.0,
                            AircraftRegistration = "N12345",
                            Cycles = 0,
                            DeAntiIcingDataId = 2,
                            DepartureAirport = "BLL",
                            DestinationAirport = "NVI",
                            FlightNumber = "AB124",
                            FuelOnBoard = 1500.0,
                            OffBlockTime = new DateTime(2024, 10, 23, 18, 51, 55, 968, DateTimeKind.Utc).AddTicks(9706),
                            OnBlockTime = new DateTime(2024, 10, 23, 23, 51, 55, 968, DateTimeKind.Utc).AddTicks(9708),
                            ParkingFuel = 1000.0,
                            PilotId = "P002",
                            PlannedUplift = 500.0,
                            PostFlightInspectionCompleted = true,
                            PreFlightInspectionCompleted = true,
                            Remarks = "Kinda bumpy",
                            RevisedParkingFuel = 950.0,
                            UpliftInLiters = 600.0,
                            landingfuel = 700.0
                        });
                });

            modelBuilder.Entity("PilotEntryService.Models.Entities.TripLog", b =>
                {
                    b.HasOne("PilotEntryService.Models.Entities.De_Anti_IcingData", "DeAntiIcingData")
                        .WithMany()
                        .HasForeignKey("DeAntiIcingDataId");

                    b.Navigation("DeAntiIcingData");
                });
#pragma warning restore 612, 618
        }
    }
}
