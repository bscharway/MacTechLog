// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PilotEntryService.Data;

#nullable disable

namespace PilotEntryService.Migrations
{
    [DbContext(typeof(PilotEntryContext))]
    [Migration("20241015113523_initial2")]
    partial class initial2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PilotEntryService.Models.Entities.De_Anti_IcingData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FluidType")
                        .HasColumnType("int");

                    b.Property<string>("MixtureRatio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly?>("Time")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("DeAntiIcingData");
                });

            modelBuilder.Entity("PilotEntryService.Models.Entities.FuelData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("ActualUplift")
                        .HasColumnType("float");

                    b.Property<double>("FuelOnBoard")
                        .HasColumnType("float");

                    b.Property<double>("ParkingFuel")
                        .HasColumnType("float");

                    b.Property<double>("PlannedUplift")
                        .HasColumnType("float");

                    b.Property<double>("RevisedParkingFuel")
                        .HasColumnType("float");

                    b.Property<double>("UpliftInLiters")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("FuelData");
                });

            modelBuilder.Entity("PilotEntryService.Models.Entities.Inspection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("PostFlightInspectionCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("PreFlightInspectionCompleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Inspections");
                });

            modelBuilder.Entity("PilotEntryService.Models.Entities.TripLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AircraftRegistration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeAntiIcingDataId")
                        .HasColumnType("int");

                    b.Property<string>("DepartureAirport")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DestinationAirport")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("FlightNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("FuelDataId")
                        .HasColumnType("int");

                    b.Property<int>("InspectionId")
                        .HasColumnType("int");

                    b.Property<string>("PilotId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeAntiIcingDataId");

                    b.HasIndex("FuelDataId");

                    b.HasIndex("InspectionId");

                    b.ToTable("TripLogs");
                });

            modelBuilder.Entity("PilotEntryService.Models.Entities.TripLog", b =>
                {
                    b.HasOne("PilotEntryService.Models.Entities.De_Anti_IcingData", "DeAntiIcingData")
                        .WithMany()
                        .HasForeignKey("DeAntiIcingDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PilotEntryService.Models.Entities.FuelData", "FuelData")
                        .WithMany()
                        .HasForeignKey("FuelDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PilotEntryService.Models.Entities.Inspection", "Inspection")
                        .WithMany()
                        .HasForeignKey("InspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeAntiIcingData");

                    b.Navigation("FuelData");

                    b.Navigation("Inspection");
                });
#pragma warning restore 612, 618
        }
    }
}
